#version 330

#define PI 3.1415926535897932384626433832795


uniform sampler2D   textureAlbedo;
uniform sampler2D   textureNormals;
uniform sampler2D   textureRoughness;
uniform sampler2D   textureMetalness;
uniform sampler2D   textureOcclusion;

uniform samplerCube textureEnvironment;


in      vec3    fPos;
in      mat3    fTBN;
in      vec2    fTex;


out     vec4    oColor;


float Fresnel(vec3 normal, vec3 view, float roughness);
float GeometricAttenuation(vec3 normal, vec3 view, vec3 light);
float Distribution(vec3 normal, vec3 view, vec3 light, float roughness);
float Diffuse(vec3 normal, vec3 light, vec3 view, float roughness);
float Specular(vec3 normal, vec3 light, vec3 view, float roughness);


void main2() {
    vec3    view        = normalize(-fPos);
    vec3    tangent     = normalize(fTBN[0]);
    vec3    binormal    = normalize(fTBN[1]);
    
    oColor  = vec4(1.0f); return;
    
    {
        float   textureResolution  = 2048.0f; // in pixels
        vec3    volumeSize         = vec3(1.0f, 0.12f, 1.0f);
        
        vec3    scanDirection      = vec3(0.0f); {
            scanDirection.x = dot(-view, tangent);
            scanDirection.z = dot(-view, binormal);
            scanDirection.y = -sqrt(1.0f - scanDirection.x * scanDirection.x - scanDirection.z * scanDirection.z);
            
            if (length(scanDirection) > 0.0f) {
                scanDirection = normalize(scanDirection);
            }
        }
        
        float   scanStepFactor  = 5.0f; // in pixels
        vec3    scanStep        = scanDirection * scanStepFactor / textureResolution;
        
        vec3    origin          = vec3(fTex.x, 1.0f, fTex.y) * volumeSize; {
            vec3    t0  = vec3(origin.x, 0.0f, origin.z);
            vec3    t1  = t0 - scanDirection * volumeSize.y;
            
            origin.xz   = t1.xz;
        }
        vec3    current         = origin;
        
        while (true) {
            if (current.x < 0.0f || current.x > volumeSize.x || current.y < 0.0f || current.y > volumeSize.y || current.z < 0.0f || current.z > volumeSize.z) {
                break;
            }
            
            vec2    currentTex      = current.xz / volumeSize.xz;
            float   currentHeight   = textureLod(textureNormals, currentTex, 0.0f).w * volumeSize.y;
            
            if (current.y < currentHeight) {
                break;
            }
            
            current += scanStep;
        }
        
        vec2    tex             = current.xz / volumeSize.xz;
        
        if (tex.x >= 0.0f && tex.x <= 1.0f && tex.y >= 0.0f && tex.y <= 1.0f) {
            oColor  = vec4(vec3(texture(textureNormals, tex).w), 1.0f);
            
            vec4    dataAlbedo      = texture(textureAlbedo,    tex);
            vec4    dataNormals     = texture(textureNormals,   tex);
            vec4    dataRoughness   = texture(textureRoughness, tex);
            vec4    dataOcclusion   = texture(textureOcclusion, tex);

            vec3    albedo      = dataAlbedo.xyz;
            // vec3    view        = normalize(-fPos);
            vec3    normal      = normalize(fTBN * (dataNormals.xyz * 2.0 - 1.0f));
            float   height      = dataNormals.w;
            vec3    light       = normalize(vec3(1.0f, 3.0f, -2.0f));
            float   roughness   = dataRoughness.x;
            float   occlusion   = dataOcclusion.x;
            float   ambient     = 0.0f;
            // float   gloss       = 1.0f - pow(roughness, 2.0f);
            
            float   diffuseIntensity    = Diffuse(normal, light, view, roughness);
            float   specularIntensity   = Specular(normal, light, view, roughness);
            
            oColor = vec4(albedo * (occlusion * ambient + diffuseIntensity) + vec3(specularIntensity * diffuseIntensity), 1.0f);
        }
        else {
            // discard;
        }
    }
    
	/*float	stepsCount = 32.0f;
	float	stepFactor = 1.0f / stepsCount;
	float	emboss = 0.16f;
	float	scale = 1.0f;
	float	embossScaleFactor = emboss / scale; // 0.1f;
    
	vec2	scanDirectionOnMap = vec2( dot(tangent, -view) , dot(binormal, -view) );
	vec2	scanStepOnMap = embossScaleFactor * stepFactor * scanDirectionOnMap; // 1 step must scan 'stepFactor' part of 'emboss' and corresponding part of 
	float	scanStepOnHeight = stepFactor;
    
	vec2	tex = fTex;
	vec2	previousTex = tex;
    
	float	scanHeight = 1.0f;
    float   previousHeight = 1.0f;
	float	currentHeight = texture(textureNormals, tex).w;
	
    while(scanHeight > currentHeight) {
		previousTex = tex;
        previousHeight = currentHeight;
        
		scanHeight -= scanStepOnHeight;
		tex += scanStepOnMap;
        
		currentHeight = texture(textureNormals, tex).w;
	}
    
	float	a = previousHeight, b = currentHeight, x = scanHeight + scanStepOnHeight, y = scanHeight;
	float	t = (a - x) / ((y - x) - (b - a));
	tex = mix(previousTex, tex, t);

    oColor = vec4(vec3(currentHeight), 1.0f);
    
    if (tex.x < 0.0f || tex.x > 1.0f || tex.y < 0.0f || tex.y > 1.0f) {
        oColor = vec4(1.0f, 0.0f, 0.0f, 1.0f);
    }*/
}
void main1() {
    vec3    view = normalize(-fPos);
    vec2    tex = fTex;

    vec4    dataAlbedo      = texture(textureAlbedo,    tex);
    vec4    dataNormals     = texture(textureNormals,   tex);
    vec4    dataRoughness   = texture(textureRoughness, tex);
    vec4    dataOcclusion   = texture(textureOcclusion, tex);

    vec3    albedo      = dataAlbedo.xyz;
    // vec3    view        = normalize(-fPos);
    vec3    normal      = normalize(fTBN * (dataNormals.xyz * 2.0 - 1.0f));
    float   height      = dataNormals.w;
    vec3    light       = normalize(vec3(1.0f, 3.0f, -2.0f));
    float   roughness   = dataRoughness.x;
    float   occlusion   = dataOcclusion.x;
    float   ambient     = 0.4f;
    // float   gloss       = 1.0f - pow(roughness, 2.0f);
    
    float   diffuseIntensity    = Diffuse(normal, light, view, roughness);
    float   specularIntensity   = Specular(normal, light, view, roughness);
    
	oColor = vec4(albedo * (occlusion * ambient + diffuseIntensity) + vec3(specularIntensity), 1.0f);
    oColor = pow(oColor, vec4(1.0f)); // gamma correction (2.2f)
}
void main() {
    vec3    view = normalize(-fPos);
    vec3    tangent = normalize(fTBN[0]);
    vec3    binormal = normalize(fTBN[1]);
    
    oColor  = vec4(1.0f); return;
	
	float	stepsCount = 32.0f;
	float	stepFactor = 1.0f / stepsCount;
	float	emboss = 0.04f;
	float	scale = 1.0f;
	float	embossScaleFactor = emboss / scale; // 0.1f;
    
	vec2	scanDirectionOnMap = vec2( dot(tangent, -view) , dot(binormal, -view) );
	vec2	scanStepOnMap = embossScaleFactor * stepFactor * scanDirectionOnMap; // 1 step must scan 'stepFactor' part of 'emboss' and corresponding part of 
	float	scanStepOnHeight = stepFactor;
    
	vec2	tex = fTex;
	vec2	previousTex = tex;
    
	float	scanHeight = 1.0f;
    float   previousHeight = 1.0f;
	float	currentHeight = texture(textureNormals, tex).w;
	
    while(scanHeight > currentHeight) {
		previousTex = tex;
        previousHeight = currentHeight;
        
		scanHeight -= scanStepOnHeight;
		tex += scanStepOnMap;
        
		currentHeight = texture(textureNormals, tex).w;
	}
    
	float	a = previousHeight, b = currentHeight, x = scanHeight + scanStepOnHeight, y = scanHeight;
	float	t = (a - x) / ((y - x) - (b - a));
	tex = mix(previousTex, tex, t);

    // data
    vec4    dataAlbedo              = texture(textureAlbedo,        tex);
    vec4    dataNormals             = texture(textureNormals,       tex);
    vec4    dataRoughness           = texture(textureRoughness,     tex);
    vec4    dataMetalness           = texture(textureMetalness,     tex);
    vec4    dataOcclusion           = texture(textureOcclusion,     tex);
    
    // parameters
    vec3    albedo                  = dataAlbedo.xyz;
    vec3    normal                  = normalize(fTBN * (dataNormals.xyz * 2.0 - 1.0f));
    float   height                  = dataNormals.w;
    float   roughness               = dataRoughness.x;
    float   metalness               = dataMetalness.x;
    float   occlusion               = dataOcclusion.x;
    
    // environment
    vec3    relfection              = reflect(-view, normal);
        
    vec4    dataEnvironment         = textureLod(textureEnvironment, relfection, 11.0f * roughness * roughness);
    vec3    environment             = dataEnvironment.xyz;
    
    // ambient
    vec3    ambientColor            = vec3(0.4f);

    // light
    vec3    lightDirection          = normalize(vec3(1.0f, 3.0f, -2.0f)); // direction on light
    vec3    lightColor              = vec3(1.0f) * 0.8f;

    float   diffuseIntensity        = Diffuse(normal, lightDirection, view, roughness);
    float   specularIntensity       = Specular(normal, lightDirection, view, roughness);
    float   environmentIntensity    = Fresnel(normal, view, roughness * roughness);
    
	oColor = vec4(
        ambientColor * albedo * occlusion +
        environment * ambientColor * mix(vec3(1.0f), albedo, metalness) * environmentIntensity +
        lightColor * albedo * diffuseIntensity +
        lightColor  * mix(vec3(1.0f), albedo, metalness) * specularIntensity,
        // albedo * (occlusion * ambient + diffuseIntensity) + vec3(specularIntensity),
        1.0f
    );
    // oColor = pow(oColor, vec4(1.0f)); // gamma correction (2.2f)
    // oColor = vec4(environment, 1.0f);
}


float Fresnel(vec3 normal, vec3 view, float roughness) {
	float	r = roughness + 0.01f;
	
	float	A = 1.0f + 5.0f * r; // 5.0f
	float	B = (1.0f - pow(r, 2.0f)) / 3.0f;
	
	float	fresnel = 1.0f / pow(1.0f + pow(dot(view, normal), 2.0), A);
	float	schlick = pow(1.0f - pow(dot(view, normal), 2.0), A) * (1.0f - B) + B;
	
	return	fresnel;
}
float GeometricAttenuation(vec3 normal, vec3 view, vec3 light) {
	vec3	halfVector = normalize(view + light);
	
	float	implicit = dot(normal, light) * dot(normal, view);
	float	neumann = (dot(normal, light) * dot(normal, view)) / max(dot(normal, light), dot(normal, view));
	float	cookTorrance = min(	1.0f, min(
								(2.0f * dot(normal, halfVector) * dot(normal, view)) / dot(view, halfVector),
								(2.0f * dot(normal, halfVector) * dot(normal, light)) / dot(view, halfVector)));
	float	kelemen = (dot(normal, light) * dot(normal, view)) / pow(dot(view, halfVector), 2.0f);
	
	return	kelemen;
}
float Distribution(vec3 normal, vec3 view, vec3 light, float roughness) {
	float	r = roughness + 0.01f;
	vec3	halfVector = normalize(view + light);
	float	r2 = pow(r, 2.0f);
	
	float	blinnPhong = (1.0f / (PI * r2)) * pow(dot(normal, halfVector), (2.0f / r2) - 2.0f);
	float	beckmann = (1.0f / (PI * r2 * pow(dot(normal, halfVector), 4.0f))) * exp((pow(dot(normal, halfVector), 2.0f) - 1.0f) / (r2 * pow(dot(normal, halfVector), 2.0f)));
	float 	trowbridgeReitz = r2 / (PI * pow(pow(dot(normal, halfVector), 2.0f) * (r2 - 1.0f) + 1.0f, 2.0f));
	
	return	beckmann;
}
float Diffuse(vec3 normal, vec3 light, vec3 view, float roughness) {
	float r = pow(roughness, 2.0f);
	float A = 1.0f - 0.5f * (r / (r + 0.33f));
	float B = 0.45f * (r / (r + 0.09f));
	float a = max( dot(normal, light), dot(normal, view) );
	float b = min( dot(normal, light), dot(normal, view) );
	float fL = acos(dot(normal, light));
	float fV = acos(dot(normal, view));
	
	float lambert = clamp(dot(normal, light), 0.0f, 1.0f);
	float orenNayar = clamp(dot(normal, light) * (A + B * max(0.0f, cos(fV - fL)) * sin(a) * tan(b)), 0.0f, 1.0f);
	
	return lambert;
}
float Specular(vec3 normal, vec3 light, vec3 view, float roughness) { // pixel->light, pixel->camera
    if (dot(normal, light) <= 0) {
        return 0.0f;
    }
    
	float	distribution = Distribution(normal, view, light, roughness);
	float	fresnel = Fresnel(normal, view, roughness);
	float	geometricAttenuation = GeometricAttenuation(normal, view, light);

	
	float p = 1.01f / pow(roughness + 0.01f, 2.0f);
	
	float	phong = pow(max(dot(reflect(-light, normal), view), 0.0f), p) * fresnel;
	float	blinn = pow(max(dot(normal, normalize(light + view)), 0.0f), p) * fresnel;
	float	cookTorrance = max(
		pow(max(dot(light, normal) ,0.0f), 2.0f) * // just to cover artifacts of high roughness
		(distribution * fresnel * geometricAttenuation) /
		(dot(normal, view) * dot(normal, light)),
		0.0f);
	
	return	phong;
}
